import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import requests
from datetime import datetime, timedelta
from analysis_service import StockAnalyzer
from config import ALPHA_VANTAGE_API_KEY

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—ò–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞
st.set_page_config(
    page_title="üìä Stock Analytics Dashboard",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ò–Ω–∏—Ü–∏—ò–∞–ª–∏–∑–∞—Ü–∏—ò–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ—Ç
analyzer = StockAnalyzer()

# CSS —Å—Ç–∏–ª–æ–≤–∏ –∑–∞ –ø–æ–¥–æ–±–∞—Ä –∏–∑–≥–ª–µ–¥
st.markdown("""
    <style>
    .sidebar .sidebar-content {
        background-color: #f0f2f6;
    }
    .stButton>button {
        width: 100%;
    }
    </style>
    """, unsafe_allow_html=True)

def fetch_stock_data(symbol):
    """–ó–µ–º–∞ –ø–æ–¥–∞—Ç–æ—Ü–∏ –æ–¥ Alpha Vantage API"""
    try:
        url = f"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol={symbol}&apikey={ALPHA_VANTAGE_API_KEY}"
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        
        if 'Time Series (Daily)' not in data:
            st.error(f"–ì—Ä–µ—à–∫–∞ –≤–æ –ø–æ–¥–∞—Ç–æ—Ü–∏—Ç–µ –∑–∞ {symbol}: {data.get('Note', '–ù–µ–ø–æ–∑–Ω–∞—Ç–∞ –≥—Ä–µ—à–∫–∞')}")
            return pd.DataFrame()
            
        time_series = data['Time Series (Daily)']
        df = pd.DataFrame.from_dict(time_series, orient='index')
        
        # –ü—Ä–µ–∏–º–µ–Ω—É–≤–∞—ö–µ –Ω–∞ –∫–æ–ª–æ–Ω–∏
        df = df.rename(columns={
            '1. open': 'open',
            '2. high': 'high',
            '3. low': 'low',
            '4. close': 'close',
            '5. volume': 'volume'
        })
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞—ö–µ –Ω–∞ —Ç–∏–ø–æ–≤–∏
        df.index = pd.to_datetime(df.index)
        df = df.astype({
            'open': float,
            'high': float,
            'low': float,
            'close': float,
            'volume': int
        })
        
        df['symbol'] = symbol
        return df.sort_index(ascending=True)
        
    except Exception as e:
        st.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—á–∏—Ç—É–≤–∞—ö–µ –Ω–∞ –ø–æ–¥–∞—Ç–æ—Ü–∏: {str(e)}")
        return pd.DataFrame()

# –°–µ–∫—Ü–∏—ò–∞ –∑–∞ sidebar
with st.sidebar:
    st.header("üîß –ö–æ–Ω—Ç—Ä–æ–ª–µ–Ω –ü–∞–Ω–µ–ª")
    
    # –ò–∑–±–æ—Ä –Ω–∞ –∞–∫—Ü–∏—ò–∞
    symbols = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA', 'META', 'NFLX']
    selected_symbol = st.selectbox("–ò–∑–±–µ—Ä–∏ –∞–∫—Ü–∏—ò–∞:", symbols, index=0)
    
    # –û–ø—Ü–∏–∏
    days_to_show = st.slider("–ë—Ä–æ—ò –Ω–∞ –¥–µ–Ω–æ–≤–∏ –∑–∞ –ø—Ä–∏–∫–∞–∑:", 7, 365, 30)
    show_volume = st.checkbox("–ü—Ä–∏–∫–∞–∂–∏ –≤–æ–ª—É–º–µ–Ω", True)
    
    # –ö–æ–ø—á–µ –∑–∞ –≤—á–∏—Ç—É–≤–∞—ö–µ
    fetch_data = st.button("–ü—Ä–µ–∑–µ–º–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏", type="primary")

# –ì–ª–∞–≤–µ–Ω –ø–∞–Ω–µ–ª
st.title(f"üìà –ê–Ω–∞–ª–∏–∑–∞ –Ω–∞ –∞–∫—Ü–∏–∏: {selected_symbol if 'selected_symbol' in locals() else ''}")

if fetch_data and selected_symbol:
    with st.spinner(f"–í—á–∏—Ç—É–≤–∞–º –ø–æ–¥–∞—Ç–æ—Ü–∏ –∑–∞ {selected_symbol}..."):
        df = fetch_stock_data(selected_symbol)
        
        if not df.empty:
            # –û–≥—Ä–∞–Ω–∏—á–∏ –≥–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏—Ç–µ —Å–ø–æ—Ä–µ–¥ –∏–∑–±—Ä–∞–Ω–∏–æ—Ç –ø–µ—Ä–∏–æ–¥
            df = df.tail(days_to_show)
            
            # –ü—Ä–∏–∫–∞–∂–∏ –æ—Å–Ω–æ–≤–Ω–∏ –º–µ—Ç—Ä–∏–∫–∏
            col1, col2, col3 = st.columns(3)
            col1.metric("–¢–µ–∫–æ–≤–Ω–∞ —Ü–µ–Ω–∞", f"${df['close'].iloc[-1]:.2f}")
            col2.metric("–ü—Ä–æ–º–µ–Ω–∞ (1 –¥–µ–Ω)", 
                        f"${df['close'].iloc[-1] - df['close'].iloc[-2]:.2f}", 
                        f"{(df['close'].iloc[-1]/df['close'].iloc[-2]-1)*100:.2f}%")
            col3.metric("–í–∏—Å–æ–∫–æ/–ù–∏—Å–∫–æ", 
                       f"${df['high'].max():.2f}", 
                       f"${df['low'].min():.2f}")
            
            # –¢–∞–±–æ–≤–∏ –∑–∞ —Ä–∞–∑–ª–∏—á–Ω–∏ –∞–Ω–∞–ª–∏–∑–∏
            tab1, tab2, tab3 = st.tabs(["–¢—Ä–µ–Ω–¥", "OHLC", "–ü—Ä–æ–≥–Ω–æ–∑–∏"])
            
            with tab1:
                st.subheader("–¶–µ–Ω–æ–≤–µ–Ω —Ç—Ä–µ–Ω–¥")
                fig = px.line(df, x=df.index, y='close', 
                             title=f"–ó–∞—Ç–≤–æ—Ä–µ–Ω–∏ —Ü–µ–Ω–∏ –∑–∞ {selected_symbol}")
                st.plotly_chart(fig, use_container_width=True)
                
                if show_volume:
                    st.subheader("–í–æ–ª—É–º–µ–Ω –Ω–∞ —Ç—Ä–≥—É–≤–∞—ö–µ")
                    fig2 = px.bar(df, x=df.index, y='volume')
                    st.plotly_chart(fig2, use_container_width=True)
            
            with tab2:
                st.subheader("OHLC –ê–Ω–∞–ª–∏–∑–∞")
                fig = go.Figure(go.Candlestick(
                    x=df.index,
                    open=df['open'],
                    high=df['high'],
                    low=df['low'],
                    close=df['close']
                ))
                fig.update_layout(title=f"OHLC –≥—Ä–∞—Ñ–∏–∫ –∑–∞ {selected_symbol}")
                st.plotly_chart(fig, use_container_width=True)
            
            with tab3:
                st.subheader("–ü—Ä–æ–≥–Ω–æ–∑–∏")
                if st.button("–ù–∞–ø—Ä–∞–≤–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞"):
                    with st.spinner("–ü—Ä–∞–≤–∞–º –∞–Ω–∞–ª–∏–∑–∞..."):
                        try:
                            prediction = analyzer.predict_next_day(df)
                            
                            st.metric("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–∞–Ω–∞ —Ü–µ–Ω–∞", 
                                     f"${prediction['predicted_close']:.2f}",
                                     f"{prediction['change_percent']:.2f}%")
                            
                            st.info(f"–¢–æ—á–Ω–æ—Å—Ç –Ω–∞ –º–æ–¥–µ–ª: {prediction['accuracy']*100:.1f}%")
                        except Exception as e:
                            st.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–∞—ö–µ: {str(e)}")
        else:
            st.warning("–ù–µ —Å–µ –ø—Ä–æ–Ω–∞—ò–¥–µ–Ω–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏ –∑–∞ –∏–∑–±—Ä–∞–Ω–∞—Ç–∞ –∞–∫—Ü–∏—ò–∞.")
else:
    st.info("–ò–∑–±–µ—Ä–µ—Ç–µ –∞–∫—Ü–∏—ò–∞ –∏ –∫–ª–∏–∫–Ω–µ—Ç–µ –Ω–∞ '–ü—Ä–µ–∑–µ–º–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏' –∑–∞ –¥–∞ –∑–∞–ø–æ—á–Ω–µ—Ç–µ.")